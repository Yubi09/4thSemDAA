CHAIN MATRIX

#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define max(a, b) (a > b ? a : b)

void parenPrint(int **s, int i, int j)
{
  if (i == j)
  {
    printf("A%d", i);
  }
  else
  {
    printf("(");
    parenPrint(s, i, s[i][j]);
    parenPrint(s, s[i][j] + 1, j);
    printf(")");
  }
}

void matrixChain(int *dim, int n)
{
  int i, j, k, l, q;
  int **m = (int **)malloc(n * sizeof(int *));
  int **s = (int **)malloc(n * sizeof(int *));
  for (i = 0; i < n; i++)
  {
    m[i] = (int *)malloc(n * sizeof(int));
    s[i] = (int *)malloc(n * sizeof(int));
  }
  for (i = 1; i < n; i++)
  {
    m[i][i] = 0;
  }
  for (l = 2; l < n; l++)
  {
    for (i = 1; i < n - l + 1; i++)
    {
      j = i + l - 1;
      m[i][j] = INT_MAX;
      for (k = i; k <= j - 1; k++)
      {
        q = m[i][k] + m[k + 1][j] + dim[i - 1] * dim[k] * dim[j];
        if (q < m[i][j])
        {
          m[i][j] = q;
          s[i][j] = k;
        }
      }
    }
  }
  for (i = 1; i < n; i++)
  {
    for (j = 1; j < n; j++)
    {
      printf("%d ", s[i][j]);
    }
    printf("\n");
  }

    printf("The minimum number of multiplications required is: %d\n", m[1][n - 1]);
  printf("The optimal parenthesization is: ");
  parenPrint(s, 1, n - 1);
  printf("\n");
}

int main()
{
  int n, i;
  printf("Enter the number of matrices: ");
  scanf("%d", &n);
  int *dim = (int *)malloc((n + 1) * sizeof(int));
  printf("Enter the dimensions of the matrices: ");
  for (i = 0; i <= n; i++)
  {
    scanf("%d", &dim[i]);
  }

  matrixChain(dim, n + 1);

  return 0;
}

LCS

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define max(a, b) (a > b ? a : b)

void printLCS(char *x, char *y, int n, int m, int **dp){
  int l = dp[n][m];
  char *s = (char *)malloc((l + 1) * sizeof(char));
  s[l] = '\0';
  int i = n, j = m;
  while(i > 0 && j > 0){
    if(x[i - 1] == y[j - 1]){
      s[l - 1] = x[i - 1];
      l--;
      i--;
      j--;
    }
    else if(dp[i - 1][j] > dp[i][j - 1]){
      i--;
    }
    else{
      j--;
    }
  }
  printf("The longest common subsequence is: %s\n", s);
  free(s);
}

void lcsDP(char *x, char *y, int n, int m){
  int **dp = (int **)malloc((n + 1) * sizeof(int *));
  for(int i = 0; i <= n; i++){
    dp[i] = (int *)malloc((m + 1) * sizeof(int));
  }
  for(int i = 0; i <= n; i++){
    dp[i][0] = 0;
  }
  for(int i = 0; i <= m; i++){
    dp[0][i] = 0;
  }
  for(int i = 1; i <= n; i++){
    for(int j = 1; j <= m; j++){
      if(x[i - 1] == y[j - 1]){
        dp[i][j] = dp[i - 1][j - 1] + 1;
      }
      else{
        dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
      }
    }
  }
  printf("The length of the longest common subsequence is: %d\n", dp[n][m]);
  printLCS(x, y, n, m, dp);
  for(int i = 0; i <= n; i++){
    free(dp[i]);
  }
  free(dp);
}

int main(){
  int n, m;
  char *x, *y;
  printf("Enter the length of the first string: ");
  scanf("%d", &n);
  x = (char *)malloc((n + 1) * sizeof(char));
  printf("Enter the first string: ");
  scanf("%s", x);
  printf("Enter the length of the second string: ");
  scanf("%d", &m);
  y = (char *)malloc((m + 1) * sizeof(char));
  printf("Enter the second string: ");
  scanf("%s", y);
  int **dp = (int **)malloc((n + 1) * sizeof(int *));
  for(int i = 0; i <= n; i++){
    dp[i] = (int *)malloc((m + 1) * sizeof(int));
    for(int j = 0; j <= m; j++){
      dp[i][j] = -1;
    }
  }
  lcsDP(x, y, n, m);
  for(int i = 0; i <= n; i++){
    free(dp[i]);
  }
}


Minimum and Maximum Simultaneously

#include <stdio.h>
#include <stdlib.h>

int main()
{
  int i, n, min, max;
  printf("Enter the number of elements: ");
  scanf("%d", &n);
  int *arr = (int *)malloc(n * sizeof(int));
  printf("Enter the elements: ");
  for (i = 0; i < n; i++)
  {
    scanf("%d", &arr[i]);
  }
  if (n % 2 == 0)
  {
    min = arr[0];
    max = arr[1];
    for (i = 2; i < n; i += 2)
    {
      if (arr[i] > arr[i + 1])
      {
        if (arr[i] > max)
        {
          max = arr[i];
        }
        if (arr[i + 1] < min)
        {
          min = arr[i + 1];
        }
      }
      else
      {
        if (arr[i + 1] > max)
        {
          max = arr[i + 1];
        }
        if (arr[i] < min)
        {
          min = arr[i];
        }
      }
    }
  }
  else
  {
    min = arr[0];
    max = arr[0];
    for (i = 1; i < n; i += 2)
    {
      if (arr[i] > arr[i + 1])
      {
        if (arr[i] > max)
        {
          max = arr[i];
        }
        if (arr[i + 1] < min)
        {
          min = arr[i + 1];
        }
      }
      else
      {
        if (arr[i + 1] > max)
        {
          max = arr[i + 1];
        }
        if (arr[i] < min)
        {
          min = arr[i];
        }
      }
    }
  }
  printf("The minimum element is: %d\n", min);
  printf("The maximum element is: %d\n", max);
  return 0;
}


Second Largest

#include <stdio.h>
#include <stdlib.h>

int main()
{
  int i, n, max, secondMax;
  printf("Enter the number of elements: ");
  scanf("%d", &n);
  int *arr = (int *)malloc(n * sizeof(int));
  printf("Enter the elements: ");
  for (i = 0; i < n; i++)
  {
    scanf("%d", &arr[i]);
  }
  max = arr[0];
  secondMax = -1;
  for (i = 1; i < n; i++)
  {
    if (arr[i] > max)
    {
      secondMax = max;
      max = arr[i];
    }
    else if (arr[i] > secondMax && arr[i] != max)
    {
      secondMax = arr[i];
    }
  }
  if (secondMax == -1)
  {
    printf("There is no second largest element\n");
  }
  else
  {
    printf("The second largest element is: %d\n", secondMax);
  }
  return 0;
}

